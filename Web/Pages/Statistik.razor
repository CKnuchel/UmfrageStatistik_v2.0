@page "/statistik"
@inject IRepository<Modul> ModulRepository
@inject IRepository<Question> QuestionRepository
@inject IRepository<Answer> AnswerRepository
@inject IRepository<Response> ResponseRepository
@inject PreloadService PreloadService

<PageTitle>Umfrageauswertung</PageTitle>

<h3 class="text-center">Umfragestatistik</h3>

<br py-2/>

@if(module == null)
{
    PreloadService.Show(SpinnerColor.Dark, loadingText: "Die Daten werden geladen ...");
}

@if(module != null)
{
    PreloadService.Hide();
    <br py-2/>
    <div class="row text-center">
        <div class="col-4">
            @*Module*@
            <Dropdown>
                <DropdownToggleButton Color="ButtonColor.Primary"> @selectedModul.Name </DropdownToggleButton>
                <DropdownMenu>
                    @foreach(Modul m in module)
                    {
                        <DropdownItem @onclick="() => selectedModul = m" Type="ButtonType.Button">
                            @m.Name
                        </DropdownItem>
                    }
                </DropdownMenu>
            </Dropdown>

            @* ReSharper disable Html.AttributeValueNotResolved *@
            <Button Type="ButtonType.Button" Color="ButtonColor.Info" Size="Size.Small" @onclick="UpdateChart" class=" d-flex text-center justify-content-center">Update Chart</Button>
        </div>
    </div>

    @* Chart *@
    <div class="row d-flex justify-content-center">
        <PieChart @ref="pieChart" Width="675" Class="mt-5"/>
    </div>
}

@code {

    #region Properties

    // Private
    private IList<Modul> module = new List<Modul>();
    private Modul selectedModul = new Modul { Name = "Modul wählen" };

    // Chart
    private PieChart pieChart = new PieChart();
    private PieChartOptions pieChartOptions = default!;
    private ChartData chartData = default!;
    private readonly string[] backgroundColors = ColorGenerator.CategoricalTwentyColors(); //TODO: in PieChartDataset direkt definieren
        private const string STD_TITLE = "Auswertung";
    #endregion

    #region Protected
    protected override void OnInitialized()
    {
        pieChartOptions = new PieChartOptions();
        pieChartOptions.Plugins.Title!.Display = true;
        pieChartOptions.Plugins.Title.Text = STD_TITLE;
        pieChartOptions.Plugins.Title.Font!.Size = 24;
        pieChartOptions.Plugins.Legend.Position = "bottom";
    }

    protected override async Task OnInitializedAsync()
    {
        module = await ModulRepository.GetAllAsync();
        chartData = new ChartData { Labels = GetModuleNames(module), Datasets = GetModuleDataset() };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await pieChart.InitializeAsync(chartData, pieChartOptions);
        }

        await base.OnAfterRenderAsync(firstRender);
    }
    #endregion

    #region Privates
    private async void UpdateChart()
    {
        pieChartOptions.Plugins.Title!.Text = $"Auswertung {selectedModul.Name}";

        await pieChart.UpdateAsync(chartData, pieChartOptions); // Updaten des Chart und der Labels
    }
    #endregion

    // TODO: untenstehende Methoden auslagern

    #region Data Preparation
    private List<IChartDataset> GetModuleDataset()
    {
        List<IChartDataset> dataset = new List<IChartDataset>();
        List<double> testData = new List<double>();

        foreach(Modul modul in module)
        {
            testData.Add(modul.Id); // Hier wird jetzt als Wert die ID verwendet (Ausweichslösung zum testen)
        }

        dataset.Add(new PieChartDataset
                    {
                        Label = "Anzahl", // Was beim Hover über dem Kuchenteil angezeigt werden soll vor dem Wert --> Anzahl: 13
                        Data = testData, // Die Daten mit den Werten --> muss double sein
                        BackgroundColor = backgroundColors.ToList() // Die Liste mit den Farbcodes welche durch iteriert wird pro neuem Eintrag
                    });

        return dataset;
    }

    /// <summary>
    /// Definiert die Label für die Legende der Ansicht
    /// </summary>
    /// <param name="module"></param>
    /// <returns></returns>
    private List<string> GetModuleNames(IList<Modul> module)
    {
        List<string> names = new List<string>();

        foreach(Modul modul in module)
        {
            names.Add(modul.Name);
        }

        return names;
    }
    #endregion

}