@page "/statistik"
@inject IRepository<Modul> ModulRepository
@inject StandardLoader StandardLoader

<PageTitle>Umfrageauswertung</PageTitle>

<h3 class="text-center">Umfragestatistik</h3>

<br py-2/>


<br py-2/>
<div class="row justify-content-center">
    <div class="col-md-8 d-flex justify-content-between align-items-center">
        <!-- Zentriert die Elemente horizontal und verteilt den verfügbaren Raum dazwischen -->
        <!-- Dropdown -->
        <Dropdown>
            <DropdownToggleButton Color="@ButtonColor.Primary">@selectedModul.Name</DropdownToggleButton>
            <DropdownMenu>
                @foreach(Modul m in module)
                {
                    <DropdownItem @onclick="() => selectedModul = m" Type="@ButtonType.Button">
                        @m.Name
                    </DropdownItem>
                }
            </DropdownMenu>
        </Dropdown>
        <!-- Button -->
        @* ReSharper disable Html.AttributeValueNotResolved *@
        <Button Type="@ButtonType.Button" Color="@ButtonColor.Info" @onclick="UpdateChart">Update Chart</Button>
    </div>
</div>
<!-- Chart -->
<div class="row justify-content-center my-5">
    <!-- Fügt vertikalen Abstand oben und unten hinzu -->
    <div id="chart" class="d-flex justify-content-center">
        <PieChart @ref="pieChart" Width="675" Class="mt-5"/>
    </div>
</div>

<p>@testString</p>

@code {

    #region Properties

    // Private
    private IList<Modul> module = new List<Modul>();
    private Modul selectedModul = new Modul { Name = "Modul wählen" };

    string testString;
    // Chart
    private PieChart pieChart = new PieChart();
    private PieChartOptions pieChartOptions = default!;
    private ChartData chartData = default!;
    private readonly string[] backgroundColors = ColorGenerator.CategoricalTwentyColors();
    #endregion

    #region Const
    private const string STD_TITLE = "Auswertung";
    #endregion

    #region Protected
    protected override void OnInitialized()
    {
        pieChartOptions = new PieChartOptions
                          {
                              Responsive = true,
                              Plugins = new PieChartPlugins()
                          };
        pieChartOptions.Plugins.Title = new ChartPluginsTitle
                                        {
                                            Display = true,
                                            Text = STD_TITLE
                                        };
        pieChartOptions.Plugins.Title.Font!.Size = 24;
        pieChartOptions.Plugins.Legend.Position = "bottom";
    }

    protected override async Task OnInitializedAsync()
    {
        module = await ModulRepository.GetAllAsync();

        chartData = new ChartData { Labels = GetModuleNames(module), Datasets = GetModuleDataset() };
        //testString = await StandardLoader.GetTestString();
        chartData = await StandardLoader.LoadData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await pieChart.InitializeAsync(chartData, pieChartOptions);
        }

        await base.OnAfterRenderAsync(firstRender);
    }
    #endregion

    #region Privates
    private async void UpdateChart()
    {
        pieChartOptions.Plugins.Title!.Text = $"Auswertung {selectedModul.Name}";
        await pieChart.UpdateAsync(chartData, pieChartOptions); // Updaten des Chart und der Labels
    }
    #endregion

    // TODO: untenstehende Methoden auslagern

    #region Data Preparation
    private List<IChartDataset> GetModuleDataset()
    {
        List<IChartDataset> dataset = new List<IChartDataset>();
        List<double> testData = module.Select(modul => modul.Id).Select(id => (double) id).ToList();

        dataset.Add(new PieChartDataset
                    {
                        Label = "Anzahl", // Was beim Hover über dem Kuchenteil angezeigt werden soll vor dem Wert --> Anzahl: 13
                        Data = testData, // Die Daten mit den Werten --> muss double sein
                        BackgroundColor = backgroundColors.ToList() // Die Liste mit den Farbcodes welche durch iteriert wird pro neuem Eintrag
                    });

        return dataset;
    }

    /// <summary>
    /// Definiert die Label für die Legende der Ansicht
    /// </summary>
    /// <param name="module"></param>
    /// <returns></returns>
    private static List<string> GetModuleNames(IEnumerable<Modul> module)
    {
        return module.Select(modul => modul.Name).ToList();
    }
    #endregion

}