@page "/statistik"
@inject IRepository<Modul> ModulRepository
@inject IRepository<Question> QuestionRepository
@inject IRepository<Answer> AnswerRepository
@inject IRepository<Response> ResponseRepository
@inject PreloadService PreloadService

<h3 class="text-center">Umfragestatistik</h3>

<br py-2/>

@if(module == null)
{
    PreloadService.Show(SpinnerColor.Dark, loadingText: "Die Daten werden geladen ...");
}

@if(module != null)
{
    PreloadService.Hide();
    <br py-2/>
    <div class="row text-center">
        <div class="col-4">
            @*Module*@
            <Dropdown>
                <DropdownToggleButton Color="ButtonColor.Primary"> @selectedModul.Name </DropdownToggleButton>
                <DropdownMenu>
                    @foreach(Modul m in module)
                    {
                        <DropdownItem @onclick="() => SelectModul(m)" Type="ButtonType.Button">
                            @m.Name
                        </DropdownItem>
                    }
                </DropdownMenu>
            </Dropdown>

            <Button type="button" Color="ButtonColor.Info" Size="Size.Small" @onclick="UpdateChart" class=" d-flex text-center justify-content-center">Update Chart</Button>
        </div>
    </div>

    @* Chart *@
    <div class="row d-flex justify-content-center">
        <PieChart @ref="pieChart" Width="675" Class="mt-5"/>
    </div>
}

@code {

    #region Properties

    // Private
    private IList<Modul> module = new List<Modul>();
    private Modul selectedModul = new Modul { Name = "Modul wählen" };

    // Chart
    private PieChart pieChart = new PieChart();
    private PieChartOptions pieChartOptions = default!;
    private readonly ChartData chartData = default!;
    private string[] backgroundColors = ColorGenerator.CategoricalTwentyColors();
        private const string STD_TITLE = "Auswertung";
    #endregion

    #region Protected

    // 1.
    protected override void OnInitialized()
    {
        pieChartOptions = new PieChartOptions();
        pieChartOptions.Plugins.Title!.Display = true;
        pieChartOptions.Plugins.Title.Text = STD_TITLE;
        pieChartOptions.Plugins.Title.Font!.Size = 24;
        pieChartOptions.Plugins.Legend.Position = "bottom";
    }

    // 2.
    protected override async Task OnInitializedAsync()
    {
        module = await ModulRepository.GetAllAsync();
    }

    // 3.
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await pieChart.InitializeAsync(chartData, pieChartOptions);
        }

        await base.OnAfterRenderAsync(firstRender);
    }
    #endregion

    #region Privates

    // Hilfsmethoden
    private void SelectModul(Modul modul)
    {
        selectedModul = modul;
    }

    private async void UpdateChart()
    {
        pieChartOptions.Plugins.Title!.Text = $"Auswertung {selectedModul.Name}";

        await pieChart.UpdateAsync(chartData, pieChartOptions); // Updaten des Chart und den Labels
    }
    #endregion

}